#lang ivy1.8

include collections
include sorts
include numbers
include temporality

# Leave these uninterpreted here: TODO: where should they actually
# be interpreted?
type key
type value
type txn_kind_t = { read_kind, write_kind }

class query_t = {
    field kind: txn_kind_t
    field k: key
    field v: option[value]
}

# A txn_t is a particular transation to be executed at a given logical time.
# Nodes will also need to keep track of commands that they know about yet but
# can't execute the command until time passes (as there may be a concurrent
# transaction yet to arrive).
class txn_t = {
    alias t = this

    instance iter : order_iterator(this)
    isolate iso_iter = iter with this

    # TODO: would a txn_id field be useful to disambiguate otherwise-identical
    # transactions from the same node

    field origin: node_id
    field id: nat

    field ts: timestamp
    field queries: vector[query_t]

    #definition (LHS: txn_t < RHS: txn_t) : bool = 
    #    (exists I. 0 <= I & I < index.max2(LHS.queries.end(), RHS.queries.end()) &
    #    (forall J. 0 <= J & J < I ->
    #        LHS.queries.value(J) = RHS.queries.value(J) &
    #        LHS.queries.value(I) < RHS.queries.value(I)))
    
    definition (LHS: txn_t < RHS: txn_t) : bool = ts_lt(LHS.ts, RHS.ts)
}

function interfering_queries(ks1: vector[query_t], ks2: vector[query_t]) : bool =
   exists I1, I2. ks1.begin() <= I1 & I1 < ks1.end() 
                & ks2.begin() <= I2 & I2 < ks2.end()
                & (ks1.value(I1).kind = write_kind | ks2.value(I2).kind = write_kind)
                & ks1.value(I1).k = ks2.value(I2).k


function conflicts_with(t1: txn_t, t2: txn_t) : bool =
    ~(t1.origin = t2.origin & t1.id = t2.id) &
    interfering_queries(t1.queries, t2.queries)

# In the Java implementation, a CommandBuffer is sharded by key.  For simplicity
# let's be sloppier for now.
alias store_buffer = vector[txn_t]

action filter_timestamps_lt(txns: vector[txn_t], ts: timestamp) returns (ret: vector[txn_t]) = {
    var it := txns.begin();
    var e := txns.end();
    while it ~= e {
        var cur := txns.value(it);

        if ts_lt(cur.ts, ts) {
            ret := ret.append(cur);
        }

        it := it.next();
    }
}

action max_timestamp(txns: vector[txn_t]) returns (ret: timestamp) = {
    var opt_ret: option[timestamp];
    opt_ret := option[timestamp].empty;

    var it := txns.begin();
    var e := txns.end();
    while it ~= e {
        var cur := txns.value(it);

        # TODO: if both cmds are reads, not a conflict?
        if opt_ret.is_empty | ts_lt(opt_ret.contents(), cur.ts) {
            opt_ret := option[timestamp].just(cur.ts);
        }

        it := it.next();
    }

    if opt_ret.is_empty {
        # TODO: I guess I'm doing this to return the "minimal" timestamp.  Is
        # there a way to do this in a more principled way?  (Or should I just
        # return an option?)
        ret.real := 0;
        ret.seqid := 0;
    } else {
        ret := opt_ret.contents();
    }
}

action dependencies(t: txn_t, sb: store_buffer) returns (deps: vector[txn_t]) = {
    var it := sb.begin();
    var e := sb.end();
    while it ~= e {
        var gamma : txn_t := sb.value(it);

        # TODO: This feels overspecified?  Overlapping readsets are, I think,
        # sufficient, but not necessary for txn and gamma.txn to conflict.
        if interfering_queries(t.queries, gamma.queries) {
            deps := deps.append(gamma); 
            it := it.next();
        }
    }
}
