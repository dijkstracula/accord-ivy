#lang ivy1.8
include messages
include nodesets
include temporality
include txn
include types

instance server_rpc(txn_t)

include abstract_protocol

global {
    instance nset : indexset(node)
    instance net : tcp.net(msg_t)

    instance node_it : sequence_iterator(node)
}

process coordinator(self: node) = {

    # How many nodes should go into an electorate?
    # (TODO: maybe we should compute this instead by specifying
    # how many failures we should support...)
    var my_electorate : nset
    var electorate_size : nat

    # PreAccept: What other transactions depend on our current proposal?
    instance deps : ordered_set(cmd_t)

    # PreAcceptOK: What's the largest timestamp we've seen so far?
    var maxPreAcceptOK : option[txn_t]

    var slowpath_accepts : nset
    var fastpath_accepts : nset

    var sb: store_buffer

    # The highest timestamp observed for a given transaction
    var highest_ts(T: txn_t) : timestamp

    instance clock : time(self)
    instance sock : net.socket

    common {

	var init_electorate(N:node) : nset
	function ring_succ(N,M) = node.succ(N,M) | N=0 & M=node.max
    
        implementation {

            after init(self: node) {
                maxPreAcceptOK(self) := option[txn_t].empty;
                fastpath_accepts(self) := nset.emptyset;
                slowpath_accepts(self) := nset.emptyset;

                # Why can't this be a CLI argument?
                electorate_size(self) := 2;
		my_electorate(self) := nset.emptyset;
		my_electorate(self) := my_electorate(self).add(self);
#		my_electorate(self) := init_electorate(self);
		debug "foo" with e = my_electorate(self);
            }

            export action read(self: node, keys: vector[key]) = {
                var now := clock(self).now();

                var txn : txn_t;
                txn.kind := read_kind;
                txn.keys := keys;

                var msg : preaccept_msg_t;
                msg.src := self;
                msg.txn := txn;
                msg.received_at := now;

                electorate_multicast(self, msg);
                req_in_flight(self) := true; #ghost
            }

            implement preaccept_msg_t.handle(self: node, msg: preaccept_msg_t) {
                debug "preaccept_msg_t.handle" with msg=msg;

                var ts: timestamp;
                ts := max_conflict(msg.txn, sb(self));

                if msg.received_at < ts {
                    # TODO: why do we stomp over host here?
                    ts.seqid := ts.seqid.next;
                    ts.host := self;
                }

                var deps: vector[cmd_t];
                deps := dependencies(msg.txn, sb(self));

                var cmd : cmd_t;
                cmd.txn := msg.txn;

                var resp : preaccept_ok_msg_t;
                resp.src := self;
                resp.cmd := cmd;
                resp.deps := deps;
                resp.witnessed_at := ts;
                unicast(self, resp, msg.src);

                protocol.handle_preaccepted(self, cmd);
            }

            implement preaccept_ok_msg_t.handle(self: node, msg: preaccept_ok_msg_t) {
                debug "preaccept_ok_msg_t.handle" with msg=msg;

                for it, d in msg.deps {
                    deps(self).insert(d);
                }

                slowpath_accepts(self) := slowpath_accepts(self).add(msg.src);
                if msg.witnessed_at = msg.cmd.txn.t0 {
                    fastpath_accepts(self) := fastpath_accepts(self).add(msg.src);
                }

                if fastpath_accepts(self).majority(my_electorate(self)) {
                    var resp: commit_msg_t;
                    resp.src := self;
                    resp.cmd := msg.cmd;
                    resp.execute_at := msg.witnessed_at;
                    replica_multicast(self, resp);
                } else if slowpath_accepts(self).majority(nset.fullset) {
                    var resp: accept_msg_t;
                    resp.src := self;
                    resp.cmd := msg.cmd;
                    #resp.execute_at := msg.witnessed_at;
                    replica_multicast(self, resp);
                }
            }

            implement commit_msg_t.handle(self: node, msg: commit_msg_t) {
                debug "commit_msg_t.handle" with msg=msg;
            }

            implement accept_msg_t.handle(self: node, msg: accept_msg_t) {
                debug "accept_msg_t.handle" with msg=msg;
                assert false;
            }

            # Network helpers (c/o Ken's HW6 starter)

            implement sock.recv(self: node, src:tcp.endpoint, msg:msg_t) {
                msg.handle(self);
            }

            action unicast(self: node, outgoing : msg_t, dst_id : node) = {
                debug "send" with server = self, msg = outgoing, dst = dst_id;
                sock.send(self, coordinator(dst_id).sock.id,outgoing);
            }

            # TODO: right now, ignore replication for the moment.
            action replica_multicast(self: node, outgoing: msg_t) = {
                unicast(self, outgoing, self);
            }

            # node i broadcasts to nodes [i, i+elmax) % node.max
            action electorate_multicast(self: node, outgoing: msg_t) = {
                var it := node_it.begin();
                var e := node_it.end();
                while it ~= e {
                    # boy I hate this
                    if nset.member(it.value(), my_electorate(self)) {
                        unicast(self, outgoing, it.value());
                    }
                    it := it.next();
                }
            }

            action broadcast(self: node, outgoing: msg_t) = {
                var it := node_it.begin();
                var e := node_it.end();
                while it ~= e {
                    unicast(self, outgoing, it.value());
                    it := it.next();
                }
            }
        }

        specification {
            # does N have a request in flight?
            relation req_in_flight(N: node)

            after init {
                req_in_flight(N) := false;
            }

            before read(self: node, keys: vector[key]) {
                require keys.end > 0;
                require ~req_in_flight(self);
            }
        }
    }
}

